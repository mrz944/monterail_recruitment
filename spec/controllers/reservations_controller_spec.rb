require 'rails_helper'
require 'sidekiq/testing'
Sidekiq::Testing.fake!

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ReservationsController, type: :controller do
  let(:event) { create(:event) }

  let(:ticket_type_even) do
    create(:ticket_type, event: event,
           places: 100, selling_options: [TicketType::SELLING_OPTIONS[:even]])
  end

  let(:reservation) do
    create(:reservation, ticket_reservations: [build(:ticket_reservation, ticket_type: ticket_type_even)])
  end

  describe "GET #show" do
    it "returns a success response" do
      get :show, params: {id: reservation.to_param}
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    
    let(:ticket_type_all_together) do
      create(:ticket_type, event: event,
             places: 100, selling_options: [TicketType::SELLING_OPTIONS[:all_together]])
    end
    let(:ticket_type_avoid_one) do
      create(:ticket_type, event: event,
             places: 100, selling_options: [TicketType::SELLING_OPTIONS[:avoid_one]])
    end

    let(:valid_reservation_attributes) do
      { event_id: event.id, ticket_type_id: ticket_type_even.id, places: 10 }
    end
    let(:invalid_even_reservation_attributes) do
      { event_id: event.id, ticket_type_id: ticket_type_even.id, places: 11 }
    end
    let(:invalid_all_together_reservation) do
      { event_id: event.id, ticket_type_id: ticket_type_all_together.id, places: 10 }
    end
    let(:invalid_avoid_one_reservation) do
      { event_id: event.id, ticket_type_id: ticket_type_avoid_one.id, places: 99 }
    end

    context "with valid params" do
      it "creates a new Reservation" do
        expect {
          post :create, params: { reservation: valid_reservation_attributes }
        }.to change(Reservation, :count).by(1)
      end

      it "renders a JSON response with the new reservation" do
        post :create, params: { reservation: valid_reservation_attributes }
        expect(response).to have_http_status(:created)
        expect(response.content_type).to eq('application/json; charset=utf-8')
        expect(response.location).to eq(reservation_url(Reservation.last))
      end

      it "ReservationWorker destroy unpaid reservation" do
        expect {
          post :create, params: { reservation: valid_reservation_attributes }
          Sidekiq::Testing.inline! do
            ReservationWorker.perform_async(Reservation.last.id)
          end
        }.not_to change(Reservation, :count)
      end
    end

    context "with invalid tick_type params with even selling_options" do
      it "renders a JSON response with errors for the new reservation" do
        post :create, params: { reservation: invalid_even_reservation_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end

    context "with invalid tick_type params with all_together selling_options" do
      it "renders a JSON response with errors for the new reservation" do
        post :create, params: { reservation: invalid_all_together_reservation }
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end

    context "with invalid tick_type params with avoid_one selling_options" do
      it "renders a JSON response with errors for the new reservation" do
        post :create, params: { reservation: invalid_avoid_one_reservation }
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end
  end

  describe "POST #payment_gateway" do
    let(:valid_payment_params) do
      { reservation_id: reservation.id, token: 'success' }
    end
    let(:invalid_payment_params) do
      { reservation_id: reservation.id, token: 'payment_error' }
    end

    context "with valid params" do
      it "makes reservation paid" do
        post :payment_gateway, params: { payment: valid_payment_params }
        expect(Reservation.find(reservation.id).paid?).to eq(true)
      end

      it "returns a success response" do
        post :payment_gateway, params: { payment: valid_payment_params }
        expect(response).to be_successful
      end
    end

    context "with invalid params" do
      it "doesn't make reservation paid" do
        post :payment_gateway, params: { payment: invalid_payment_params }
        expect(Reservation.find(reservation.id).paid?).to eq(false)
      end

      it "returns an error" do
        post :payment_gateway, params: { payment: invalid_payment_params }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end
end
